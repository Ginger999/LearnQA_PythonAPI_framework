{"name": "Invalid edit for one user by another user", "status": "failed", "statusDetails": {"message": "AssertionError: Expected: 'learnqa' | Actual: 'ChangedName'", "trace": "self = <test_user_edit.TestUserEdit object at 0x0000020ED8A33880>, param = 'firstName'\n\n    @allure.suite(\"edit_003\")\n    @allure.title(\"Invalid edit for one user by another user\")\n    @allure.description(\"This test is logged in by User1 and tries change data of User2\")\n    @pytest.mark.parametrize('param', include_params)\n    def test_edit_user2_by_logged_user1(self, param):\n        \"\"\"\n        Попытаемся изменить данные пользователя, будучи авторизованными другим пользователем\n        \"\"\"\n        # Register User1 and User2\n        created_user_1 = self.create_user()\n        created_user_2 = self.create_user()\n        user_id_1 = created_user_1.get('user_id')\n        user_id_2 = created_user_2.get('user_id')\n        old_param_value_1 = created_user_1.get(param)\n        old_param_value_2 = created_user_2.get(param)\n    \n        # Login by User1\n        logged_user_1 = self.login_by_user(created_user_1.get('email'), created_user_1.get('password'))\n        auth_sid_1 = self.get_cookie(logged_user_1, \"auth_sid\")\n        token_1 = self.get_header(logged_user_1, \"x-csrf-token\")\n        Assertions.assert_status_code(logged_user_1, 200)\n    \n        # Edit User2\n        new_param_value = self.changed_user_params.get(param)\n        edited_user_2 = self.edit_user(user_id_2, token_1, auth_sid_1, param, new_param_value)\n        # Assertions.assert_unexpected_status_code(edited_user, 200)  # Отловим при проверке, отредактировались ли данные\n    \n        # Get User1 - param value should not be changed\n        resulted_user_1 = self.get_user(user_id_1, token_1, auth_sid_1)\n        Assertions.assert_status_code(resulted_user_1, 200)\n>       Assertions.assert_json_value_by_name(resulted_user_1, param, old_param_value_1, \"\")\n\ntests\\test_user_edit.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [200]>, name = 'firstName', expected_value = 'learnqa', error_message = ''\n\n    @staticmethod\n    def assert_json_value_by_name(response: Response, name, expected_value, error_message):\n        try:\n            response_as_dict = response.json()\n        except json.JSONDecodeError:\n            assert False, f\"Response is not in JSON format. Response text is '{response.text}'\"\n    \n        assert name in response_as_dict, f\"Response JSON does not have key '{name}'\"\n>       assert response_as_dict[name] == expected_value, f\"Expected: '{expected_value}' | Actual: '{response_as_dict[name]}' {error_message} \"\nE       AssertionError: Expected: 'learnqa' | Actual: 'ChangedName'\n\nlib\\assertions.py:14: AssertionError"}, "description": "This test is logged in by User1 and tries change data of User2", "steps": [{"name": "POST request to URL '/user/'", "status": "passed", "start": 1651035804414, "stop": 1651035804993}, {"name": "POST request to URL '/user/'", "status": "passed", "start": 1651035804993, "stop": 1651035805590}, {"name": "login_by_user", "status": "passed", "steps": [{"name": "POST request to URL '/user/login'", "status": "passed", "start": 1651035805605, "stop": 1651035805683}], "parameters": [{"name": "email", "value": "'learnqa04272022080324__413805@example.com'"}, {"name": "password", "value": "'1234'"}], "start": 1651035805605, "stop": 1651035805683}, {"name": "edit_user", "status": "passed", "steps": [{"name": "PUT request to URL '/user/34297'", "status": "passed", "start": 1651035805683, "stop": 1651035806386}], "parameters": [{"name": "user_id", "value": "'34297'"}, {"name": "token", "value": "'7f77518f38dcc670765032ad466f405e722862078343f02bcd879e05ab73fe3462acb4aa'"}, {"name": "auth_sid", "value": "'033ab4a806fef65b02f21e61886fcce88343f02bcd879e05ab73fe3462acb4aa'"}, {"name": "param", "value": "'firstName'"}, {"name": "param_value", "value": "'ChangedName'"}], "start": 1651035805683, "stop": 1651035806386}, {"name": "get_user", "status": "passed", "steps": [{"name": "GET request to URL '/user/34296'", "status": "passed", "start": 1651035806386, "stop": 1651035806933}], "parameters": [{"name": "user_id", "value": "'34296'"}, {"name": "token", "value": "'7f77518f38dcc670765032ad466f405e722862078343f02bcd879e05ab73fe3462acb4aa'"}, {"name": "auth_sid", "value": "'033ab4a806fef65b02f21e61886fcce88343f02bcd879e05ab73fe3462acb4aa'"}], "start": 1651035806386, "stop": 1651035806933}], "parameters": [{"name": "param", "value": "'firstName'"}], "start": 1651035804414, "stop": 1651035806933, "uuid": "784f1af2-d61c-41cc-b454-cd9fbd2e15a6", "historyId": "df7d11439ecdb93366c218a41ea9a708", "testCaseId": "527fbdf2bc152662126f25cd8ddc94da", "fullName": "tests.test_user_edit.TestUserEdit#test_edit_user2_by_logged_user1", "labels": [{"name": "epic", "value": "Editing cases"}, {"name": "suite", "value": "edit_003"}, {"name": "parentSuite", "value": "tests"}, {"name": "subSuite", "value": "TestUserEdit"}, {"name": "host", "value": "kalinina-y-nb"}, {"name": "thread", "value": "12508-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_user_edit"}]}